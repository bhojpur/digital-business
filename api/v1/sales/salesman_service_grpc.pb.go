// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sales

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalesmanServiceClient is the client API for SalesmanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesmanServiceClient interface {
	SalesmanCreate(ctx context.Context, in *Salesman, opts ...grpc.CallOption) (*Salesman, error)
	SalesmanUpdate(ctx context.Context, in *Salesman, opts ...grpc.CallOption) (*Salesman, error)
	SalesmanView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Salesman, error)
	SalesmanList(ctx context.Context, in *ListSalesmanRequest, opts ...grpc.CallOption) (SalesmanService_SalesmanListClient, error)
}

type salesmanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesmanServiceClient(cc grpc.ClientConnInterface) SalesmanServiceClient {
	return &salesmanServiceClient{cc}
}

func (c *salesmanServiceClient) SalesmanCreate(ctx context.Context, in *Salesman, opts ...grpc.CallOption) (*Salesman, error) {
	out := new(Salesman)
	err := c.cc.Invoke(ctx, "/v1.sales.SalesmanService/SalesmanCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesmanServiceClient) SalesmanUpdate(ctx context.Context, in *Salesman, opts ...grpc.CallOption) (*Salesman, error) {
	out := new(Salesman)
	err := c.cc.Invoke(ctx, "/v1.sales.SalesmanService/SalesmanUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesmanServiceClient) SalesmanView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Salesman, error) {
	out := new(Salesman)
	err := c.cc.Invoke(ctx, "/v1.sales.SalesmanService/SalesmanView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesmanServiceClient) SalesmanList(ctx context.Context, in *ListSalesmanRequest, opts ...grpc.CallOption) (SalesmanService_SalesmanListClient, error) {
	stream, err := c.cc.NewStream(ctx, &SalesmanService_ServiceDesc.Streams[0], "/v1.sales.SalesmanService/SalesmanList", opts...)
	if err != nil {
		return nil, err
	}
	x := &salesmanServiceSalesmanListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SalesmanService_SalesmanListClient interface {
	Recv() (*ListSalesmanResponse, error)
	grpc.ClientStream
}

type salesmanServiceSalesmanListClient struct {
	grpc.ClientStream
}

func (x *salesmanServiceSalesmanListClient) Recv() (*ListSalesmanResponse, error) {
	m := new(ListSalesmanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SalesmanServiceServer is the server API for SalesmanService service.
// All implementations must embed UnimplementedSalesmanServiceServer
// for forward compatibility
type SalesmanServiceServer interface {
	SalesmanCreate(context.Context, *Salesman) (*Salesman, error)
	SalesmanUpdate(context.Context, *Salesman) (*Salesman, error)
	SalesmanView(context.Context, *Id) (*Salesman, error)
	SalesmanList(*ListSalesmanRequest, SalesmanService_SalesmanListServer) error
	mustEmbedUnimplementedSalesmanServiceServer()
}

// UnimplementedSalesmanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalesmanServiceServer struct {
}

func (UnimplementedSalesmanServiceServer) SalesmanCreate(context.Context, *Salesman) (*Salesman, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesmanCreate not implemented")
}
func (UnimplementedSalesmanServiceServer) SalesmanUpdate(context.Context, *Salesman) (*Salesman, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesmanUpdate not implemented")
}
func (UnimplementedSalesmanServiceServer) SalesmanView(context.Context, *Id) (*Salesman, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesmanView not implemented")
}
func (UnimplementedSalesmanServiceServer) SalesmanList(*ListSalesmanRequest, SalesmanService_SalesmanListServer) error {
	return status.Errorf(codes.Unimplemented, "method SalesmanList not implemented")
}
func (UnimplementedSalesmanServiceServer) mustEmbedUnimplementedSalesmanServiceServer() {}

// UnsafeSalesmanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesmanServiceServer will
// result in compilation errors.
type UnsafeSalesmanServiceServer interface {
	mustEmbedUnimplementedSalesmanServiceServer()
}

func RegisterSalesmanServiceServer(s grpc.ServiceRegistrar, srv SalesmanServiceServer) {
	s.RegisterService(&SalesmanService_ServiceDesc, srv)
}

func _SalesmanService_SalesmanCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Salesman)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesmanServiceServer).SalesmanCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.SalesmanService/SalesmanCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesmanServiceServer).SalesmanCreate(ctx, req.(*Salesman))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesmanService_SalesmanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Salesman)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesmanServiceServer).SalesmanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.SalesmanService/SalesmanUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesmanServiceServer).SalesmanUpdate(ctx, req.(*Salesman))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesmanService_SalesmanView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesmanServiceServer).SalesmanView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.SalesmanService/SalesmanView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesmanServiceServer).SalesmanView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesmanService_SalesmanList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSalesmanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SalesmanServiceServer).SalesmanList(m, &salesmanServiceSalesmanListServer{stream})
}

type SalesmanService_SalesmanListServer interface {
	Send(*ListSalesmanResponse) error
	grpc.ServerStream
}

type salesmanServiceSalesmanListServer struct {
	grpc.ServerStream
}

func (x *salesmanServiceSalesmanListServer) Send(m *ListSalesmanResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SalesmanService_ServiceDesc is the grpc.ServiceDesc for SalesmanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesmanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.sales.SalesmanService",
	HandlerType: (*SalesmanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SalesmanCreate",
			Handler:    _SalesmanService_SalesmanCreate_Handler,
		},
		{
			MethodName: "SalesmanUpdate",
			Handler:    _SalesmanService_SalesmanUpdate_Handler,
		},
		{
			MethodName: "SalesmanView",
			Handler:    _SalesmanService_SalesmanView_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SalesmanList",
			Handler:       _SalesmanService_SalesmanList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/v1/sales/salesman_service.proto",
}
