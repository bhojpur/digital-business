// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sales

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	CustomerCreate(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	CustomerUpdate(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	CustomerView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Customer, error)
	CustomerList(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (CustomerService_CustomerListClient, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CustomerCreate(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.sales.CustomerService/CustomerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerUpdate(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.sales.CustomerService/CustomerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/v1.sales.CustomerService/CustomerView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerList(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (CustomerService_CustomerListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomerService_ServiceDesc.Streams[0], "/v1.sales.CustomerService/CustomerList", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServiceCustomerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_CustomerListClient interface {
	Recv() (*ListCustomerResponse, error)
	grpc.ClientStream
}

type customerServiceCustomerListClient struct {
	grpc.ClientStream
}

func (x *customerServiceCustomerListClient) Recv() (*ListCustomerResponse, error) {
	m := new(ListCustomerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	CustomerCreate(context.Context, *Customer) (*Customer, error)
	CustomerUpdate(context.Context, *Customer) (*Customer, error)
	CustomerView(context.Context, *Id) (*Customer, error)
	CustomerList(*ListCustomerRequest, CustomerService_CustomerListServer) error
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) CustomerCreate(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerCreate not implemented")
}
func (UnimplementedCustomerServiceServer) CustomerUpdate(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerUpdate not implemented")
}
func (UnimplementedCustomerServiceServer) CustomerView(context.Context, *Id) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerView not implemented")
}
func (UnimplementedCustomerServiceServer) CustomerList(*ListCustomerRequest, CustomerService_CustomerListServer) error {
	return status.Errorf(codes.Unimplemented, "method CustomerList not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_CustomerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.CustomerService/CustomerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerCreate(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.CustomerService/CustomerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerUpdate(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.CustomerService/CustomerView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCustomerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).CustomerList(m, &customerServiceCustomerListServer{stream})
}

type CustomerService_CustomerListServer interface {
	Send(*ListCustomerResponse) error
	grpc.ServerStream
}

type customerServiceCustomerListServer struct {
	grpc.ServerStream
}

func (x *customerServiceCustomerListServer) Send(m *ListCustomerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.sales.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerCreate",
			Handler:    _CustomerService_CustomerCreate_Handler,
		},
		{
			MethodName: "CustomerUpdate",
			Handler:    _CustomerService_CustomerUpdate_Handler,
		},
		{
			MethodName: "CustomerView",
			Handler:    _CustomerService_CustomerView_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CustomerList",
			Handler:       _CustomerService_CustomerList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/v1/sales/customer_service.proto",
}
