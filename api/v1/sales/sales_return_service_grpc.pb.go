// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sales

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalesReturnServiceClient is the client API for SalesReturnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesReturnServiceClient interface {
	SalesReturnCreate(ctx context.Context, in *SalesReturn, opts ...grpc.CallOption) (*SalesReturn, error)
	SalesReturnUpdate(ctx context.Context, in *SalesReturn, opts ...grpc.CallOption) (*SalesReturn, error)
	SalesReturnView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SalesReturn, error)
	SalesReturnList(ctx context.Context, in *ListSalesReturnRequest, opts ...grpc.CallOption) (SalesReturnService_SalesReturnListClient, error)
}

type salesReturnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesReturnServiceClient(cc grpc.ClientConnInterface) SalesReturnServiceClient {
	return &salesReturnServiceClient{cc}
}

func (c *salesReturnServiceClient) SalesReturnCreate(ctx context.Context, in *SalesReturn, opts ...grpc.CallOption) (*SalesReturn, error) {
	out := new(SalesReturn)
	err := c.cc.Invoke(ctx, "/v1.sales.SalesReturnService/SalesReturnCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReturnServiceClient) SalesReturnUpdate(ctx context.Context, in *SalesReturn, opts ...grpc.CallOption) (*SalesReturn, error) {
	out := new(SalesReturn)
	err := c.cc.Invoke(ctx, "/v1.sales.SalesReturnService/SalesReturnUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReturnServiceClient) SalesReturnView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SalesReturn, error) {
	out := new(SalesReturn)
	err := c.cc.Invoke(ctx, "/v1.sales.SalesReturnService/SalesReturnView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReturnServiceClient) SalesReturnList(ctx context.Context, in *ListSalesReturnRequest, opts ...grpc.CallOption) (SalesReturnService_SalesReturnListClient, error) {
	stream, err := c.cc.NewStream(ctx, &SalesReturnService_ServiceDesc.Streams[0], "/v1.sales.SalesReturnService/SalesReturnList", opts...)
	if err != nil {
		return nil, err
	}
	x := &salesReturnServiceSalesReturnListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SalesReturnService_SalesReturnListClient interface {
	Recv() (*ListSalesReturnResponse, error)
	grpc.ClientStream
}

type salesReturnServiceSalesReturnListClient struct {
	grpc.ClientStream
}

func (x *salesReturnServiceSalesReturnListClient) Recv() (*ListSalesReturnResponse, error) {
	m := new(ListSalesReturnResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SalesReturnServiceServer is the server API for SalesReturnService service.
// All implementations must embed UnimplementedSalesReturnServiceServer
// for forward compatibility
type SalesReturnServiceServer interface {
	SalesReturnCreate(context.Context, *SalesReturn) (*SalesReturn, error)
	SalesReturnUpdate(context.Context, *SalesReturn) (*SalesReturn, error)
	SalesReturnView(context.Context, *Id) (*SalesReturn, error)
	SalesReturnList(*ListSalesReturnRequest, SalesReturnService_SalesReturnListServer) error
	mustEmbedUnimplementedSalesReturnServiceServer()
}

// UnimplementedSalesReturnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalesReturnServiceServer struct {
}

func (UnimplementedSalesReturnServiceServer) SalesReturnCreate(context.Context, *SalesReturn) (*SalesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesReturnCreate not implemented")
}
func (UnimplementedSalesReturnServiceServer) SalesReturnUpdate(context.Context, *SalesReturn) (*SalesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesReturnUpdate not implemented")
}
func (UnimplementedSalesReturnServiceServer) SalesReturnView(context.Context, *Id) (*SalesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesReturnView not implemented")
}
func (UnimplementedSalesReturnServiceServer) SalesReturnList(*ListSalesReturnRequest, SalesReturnService_SalesReturnListServer) error {
	return status.Errorf(codes.Unimplemented, "method SalesReturnList not implemented")
}
func (UnimplementedSalesReturnServiceServer) mustEmbedUnimplementedSalesReturnServiceServer() {}

// UnsafeSalesReturnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesReturnServiceServer will
// result in compilation errors.
type UnsafeSalesReturnServiceServer interface {
	mustEmbedUnimplementedSalesReturnServiceServer()
}

func RegisterSalesReturnServiceServer(s grpc.ServiceRegistrar, srv SalesReturnServiceServer) {
	s.RegisterService(&SalesReturnService_ServiceDesc, srv)
}

func _SalesReturnService_SalesReturnCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesReturn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesReturnServiceServer).SalesReturnCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.SalesReturnService/SalesReturnCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesReturnServiceServer).SalesReturnCreate(ctx, req.(*SalesReturn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesReturnService_SalesReturnUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesReturn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesReturnServiceServer).SalesReturnUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.SalesReturnService/SalesReturnUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesReturnServiceServer).SalesReturnUpdate(ctx, req.(*SalesReturn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesReturnService_SalesReturnView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesReturnServiceServer).SalesReturnView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.sales.SalesReturnService/SalesReturnView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesReturnServiceServer).SalesReturnView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesReturnService_SalesReturnList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSalesReturnRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SalesReturnServiceServer).SalesReturnList(m, &salesReturnServiceSalesReturnListServer{stream})
}

type SalesReturnService_SalesReturnListServer interface {
	Send(*ListSalesReturnResponse) error
	grpc.ServerStream
}

type salesReturnServiceSalesReturnListServer struct {
	grpc.ServerStream
}

func (x *salesReturnServiceSalesReturnListServer) Send(m *ListSalesReturnResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SalesReturnService_ServiceDesc is the grpc.ServiceDesc for SalesReturnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesReturnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.sales.SalesReturnService",
	HandlerType: (*SalesReturnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SalesReturnCreate",
			Handler:    _SalesReturnService_SalesReturnCreate_Handler,
		},
		{
			MethodName: "SalesReturnUpdate",
			Handler:    _SalesReturnService_SalesReturnUpdate_Handler,
		},
		{
			MethodName: "SalesReturnView",
			Handler:    _SalesReturnService_SalesReturnView_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SalesReturnList",
			Handler:       _SalesReturnService_SalesReturnList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/v1/sales/sales_return_service.proto",
}
